import org.web3j.codegen.SolidityFunctionWrapper

group 'global.papyrus'
version '0.1'

apply plugin: 'java'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.web3j:core:2.3.0'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

apply plugin: 'java'
apply plugin: 'idea'

def SOLC_DIR = "build/contracts"
def SRC_GEN_DIR = "build/generated/source/contracts/java"
def SRC_GEN_PACKAGE = "global.papyrus.smartcontracts"

sourceSets {
    main {
        java {
            srcDirs = [SRC_GEN_DIR]
        }
    }
}

dependencies {
    compile('org.web3j:core:2.3.0')
}

task migrate {
    doLast {
        println "Migrate contracts with truffle"
        exec {
            commandLine "bash", "-c", "truffle migrate"
        }
    }
}

task compileContracts {
    doLast {
        println "Compiling contracts with solc"
        exec {
            commandLine "bash", "-c", "shopt -s globstar && solc -o ${SOLC_DIR} --overwrite contracts/**/*.sol --abi --bin"
        }
    }
}

task wrappers(dependsOn:'compileContracts') {
    def contracts=[
            "PapyrusWallet",
            "PapyrusKYC",
            "PrePapyrusToken",
            "PapyrusToken",
            "PapyrusDAO",
            "SSPRegistryImpl",
            "DSPRegistryImpl",
            "PublisherRegistryImpl",
            "AuditorRegistryImpl",
            "SecurityDepositRegistry",
            "SpendingDepositRegistry"
    ]

    doLast {
        def wrapper = new SolidityFunctionWrapper()
        def upToDate = true
        for (def contract : contracts) {
            def binFile = file("${SOLC_DIR}/${contract}.bin")
            def abiFile = file("${SOLC_DIR}/${contract}.abi")
            def targetFile = file("${SRC_GEN_DIR}/${SRC_GEN_PACKAGE.replaceAll('\\.', '/')}/${contract}.java")
            println("Checking file ${targetFile}")
            if (targetFile.exists() && targetFile.lastModified() >= Math.max(binFile.lastModified(), abiFile.lastModified())) continue
            println("Generating ${contract}.java")
            def binary = GFileUtils.readFile(binFile)
            def abi = GFileUtils.readFile(abiFile)
            wrapper.generateJavaFiles(contract, binary, abi, file(SRC_GEN_DIR).absolutePath, SRC_GEN_PACKAGE)
            upToDate = false
        }
        return upToDate
    }
}

compileJava.dependsOn.add(wrappers)