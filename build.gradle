import org.web3j.codegen.SolidityFunctionWrapper

group 'global.papyrus'
version '0.1'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.web3j:core:3.2.0'
        classpath 'org.web3j:codegen:3.2.0'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

def SOLC_DIR = "build/solc"
def SOLC_CONTRACTS_DIR = "$SOLC_DIR/contracts"
def SRC_GEN_DIR = "build/generated/source/contracts/java"
def SRC_GEN_PACKAGE = "global.papyrus.smartcontracts"

sourceSets {
    main {
        java {
            srcDirs = [SRC_GEN_DIR]
        }
        resources {
            srcDirs = [SOLC_DIR]
        }
    }
    test{
        java {
            srcDirs = ['src/test/java']
        }
    }
}

dependencies {
//Ethereum Web3
    compile ('org.web3j:utils:3.2.0')
    compile ('org.web3j:rlp:3.2.0')
    compile ('org.web3j:abi:3.2.0')
    compile ('org.web3j:core:3.2.0')
    compile ('org.web3j:crypto:3.2.0')
    compile ('org.web3j:geth:3.2.0')
    compile ('org.web3j:parity:3.2.0')
    compile ('org.web3j:tuples:3.2.0')
    compile ('org.web3j:codegen:3.2.0')
    compile ('org.web3j:infura:3.2.0')

    testCompile('org.testng:testng:6.11')
}

task migrate {
    doLast {
        println "Migrate contracts with truffle"
        exec {
            commandLine "bash", "-c", "truffle migrate"
        }
    }
}

task compileContracts {
    doLast {
        println "Compiling contracts with solc"
        exec {
//            commandLine "bash", "-c", "shopt -s globstar && solc -o ${SOLC_DIR} --overwrite contracts/**/*.sol --abi --bin"
            commandLine "bash", "-c", "solc -o ${SOLC_CONTRACTS_DIR} --overwrite contracts/*.sol contracts/*/*.sol contracts/*/*/*.sol --abi --bin"
        }
    }
}

task wrappers(dependsOn: compileContracts) {
    def contracts=[
            "PapyrusKYC",
            "PapyrusPrototypeToken",
            "PapyrusToken",
            "contracts_common_StandardToken_sol_StandardToken",
            "PapyrusDAO",
            "SSPRegistry",
            "DSPRegistry",
            "DSPRegistry",
            "DSPRegistrar",
            "SSPRegistrar",
            "PublisherRegistry",
            "AuditorRegistry",
            "SecurityDepositRegistry",
            "ChannelManagerContract",
            "EndpointRegistryContract"
    ]

    doLast {
        //Do not using native types - it is buggy and makes unnecessary conversions (like Address<->String)
        def nativeTypes = false
        def wrapper = new SolidityFunctionWrapper(nativeTypes)
        def upToDate = true
        for (def contract : contracts) {
            def binFile = file("${SOLC_CONTRACTS_DIR}/${contract}.bin")
            def abiFile = file("${SOLC_CONTRACTS_DIR}/${contract}.abi")
            def binary = GFileUtils.readFile(binFile)
            def abi = GFileUtils.readFile(abiFile)
            def className = contract.substring(contract.lastIndexOf('_') + 1)
            println("Generating ${className}.java")
            wrapper.generateJavaFiles(className, binary, abi, file(SRC_GEN_DIR).absolutePath, SRC_GEN_PACKAGE)
            upToDate = false
        }
        return upToDate
    }
}
compileJava.dependsOn.add(wrappers)


test {
    testLogging {
        showStandardStreams = true
    }
    systemProperties['owner.addr'] = '0x1ad984d4c05971c7c36356c3c8bc46e5c4520c94'
    useTestNG()
}

task sourcesJar ( type: Jar, dependsOn: classes ) {
    classifier 'sources'
    from 'contracts', SRC_GEN_DIR
}

publishing {
    publications {
        admin(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}